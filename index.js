// Generated by CoffeeScript 1.12.7
(function() {
  var Message, PongGame, PongServer, _, config, http, main, message, pongGame, sockjs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  http = require('http');

  sockjs = require('sockjs');

  _ = require('underscore');

  pongGame = require('./game');

  config = require('./config');

  message = require('./message');

  PongGame = pongGame.WebPongJSServerGame;

  Message = message.WebPongJSMessage;

  PongServer = (function() {
    PongServer.NEEDED_PLAYERS = 2;

    function PongServer() {
      this.broadcastState = bind(this.broadcastState, this);
      this.send = bind(this.send, this);
      this.onInput = bind(this.onInput, this);
      this.onInit = bind(this.onInit, this);
      this.onClose = bind(this.onClose, this);
      this.onData = bind(this.onData, this);
      this.onConnection = bind(this.onConnection, this);
      this.config = config.WebPongJSConfig;
      this.players = {};
      this.httpServer = http.createServer();
      this.sockServer = sockjs.createServer();
      this.newGame();
      this.handlers = {
        init: this.onInit,
        input: this.onInput
      };
      this.updaterId = null;
      this.availableBlockIds = [0, 1];
      this.lastBroadcast = (new Date).getTime();
    }

    PongServer.prototype.listen = function() {
      this.sockServer.installHandlers(this.httpServer, {
        prefix: this.config.server.prefix
      });
      this.sockServer.on('connection', this.onConnection);
      this.httpServer.on('error', (function(_this) {
        return function(e) {
          return console.error("Error running http server on " + _this.config.server.addr + ":" + _this.config.server.port + " " + e);
        };
      })(this));
      return this.httpServer.listen(this.config.server.port, this.config.server.addr);
    };

    PongServer.prototype.onConnection = function(conn) {
      console.log("New connection " + conn.id + " opened");
      if (this.playerCount() >= PongServer.NEEDED_PLAYERS) {
        console.log("Rejected connection " + conn.id + " due to full game");
        this.send(conn, 'close', 'Cannot join. Game is full');
        return conn.close();
      } else {
        this.addPlayer(conn);
        console.log("Added connection " + conn.id + ". Player count: " + (this.playerCount()));
        conn.on('data', this.onData(conn));
        return conn.on('close', this.onClose(conn));
      }
    };

    PongServer.prototype.onData = function(conn) {
      return (function(_this) {
        return function(msg) {
          var handler;
          msg = Message.parse(msg);
          handler = _this.handlers[msg.type];
          if (handler != null) {
            return handler(conn, msg.data);
          }
        };
      })(this);
    };

    PongServer.prototype.onClose = function(conn) {
      return (function(_this) {
        return function() {
          _this.removePlayer(conn);
          _this.stopUpdater();
          _this.newGame();
          _this.broadcast('drop', null);
          return console.log("Game stopped, due to player connection " + conn.id + " drop");
        };
      })(this);
    };

    PongServer.prototype.newGame = function() {
      var e;
      try {
        return this.game = new PongGame(this.config);
      } catch (error) {
        e = error;
        console.error("Could not create new game using configuration " + this.config);
        throw e;
      }
    };

    PongServer.prototype.onInit = function(conn, data) {
      var block;
      block = this.players[conn.id].block;
      this.send(conn, 'init', {
        timestamp: (new Date).getTime(),
        block: block
      });
      if (this.playerCount() === PongServer.NEEDED_PLAYERS) {
        console.log("Got " + PongServer.NEEDED_PLAYERS + " players. Starting the game");
        this.broadcast('start', null);
        this.setupUpdater();
        return this.game.start();
      } else {
        return console.log("Waiting for " + (PongServer.NEEDED_PLAYERS - this.playerCount()) + " more players");
      }
    };

    PongServer.prototype.onInput = function(conn, data) {
      return this.game.addInputUpdate(this.players[conn.id].block, data);
    };

    PongServer.prototype.send = function(conn, msgType, msgData) {
      var e, msg;
      try {
        msg = (new Message(msgType, msgData)).stringify();
      } catch (error) {
        e = error;
        console.error("Could not serialize message: type:" + msgType + ", data:" + msgData + " for sending to " + conn.id);
      }
      try {
        return conn.write(msg);
      } catch (error) {
        e = error;
        return console.error("Could not send message " + msg + " to " + conn.id + ": " + e);
      }
    };

    PongServer.prototype.broadcast = function(type, msg) {
      var cid, p, ref, results;
      ref = this.players;
      results = [];
      for (cid in ref) {
        p = ref[cid];
        results.push(this.send(p.connection, type, msg));
      }
      return results;
    };

    PongServer.prototype.broadcastState = function() {
      var cid, p, ref, results;
      this.lastBroadcast = (new Date).getTime();
      ref = this.players;
      results = [];
      for (cid in ref) {
        p = ref[cid];
        results.push(this.send(p.connection, 'update', {
          state: this.game.state,
          inputIndex: this.game.inputIndex(p.block)
        }));
      }
      return results;
    };

    PongServer.prototype.addPlayer = function(conn) {
      return this.players[conn.id] = {
        connection: conn,
        block: this.availableBlockIds.pop()
      };
    };

    PongServer.prototype.removePlayer = function(conn) {
      this.availableBlockIds.push(this.players[conn.id].block);
      return delete this.players[conn.id];
    };

    PongServer.prototype.playerCount = function() {
      return _.keys(this.players).length;
    };

    PongServer.prototype.setupUpdater = function() {
      if (this.updaterId == null) {
        return this.updaterId = setInterval(this.broadcastState, this.config.update.syncTime);
      }
    };

    PongServer.prototype.stopUpdater = function() {
      if (this.updaterId != null) {
        clearInterval(this.updaterId);
        return this.updaterId = null;
      }
    };

    return PongServer;

  })();

  exports.PongServer = PongServer;

  main = function() {
    var pongServer;
    console.log('Starting Pong Server');
    pongServer = new PongServer;
    return pongServer.listen();
  };

  if (require.main === module) {
    main();
  }

}).call(this);
